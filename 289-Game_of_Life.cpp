class Solution {
public:
    bool is_valid(vector<vector<int>> matrix, int r, int c){
        int row = matrix.size();
        int col = matrix[0].size();
        if(r >= 0 && r < row && c >= 0 && c < col)
            return true;
        return false;
    }
    int explore_neighbors(vector<vector<int>> matrix, int r, int c){
        int live = 0;
        for(int i=r-1; i<=r+1; i++){
            for(int j=c-1; j<=c+1; j++){
                if(is_valid(matrix, i, j) && (matrix[i][j] == 1 || matrix[i][j] == -100))
                    live++;
            }
        }
        return live;
    }
    void gameOfLife(vector<vector<int>>& board) {
        for(int r=0; r<board.size(); r++){
            for(int c=0; c<board[r].size(); c++){
                int live_cell = explore_neighbors(board, r, c);
                if(board[r][c] == 0 || board[r][c] == 100){
                    if(live_cell == 3)
                        board[r][c] = 100;
                }else{
                    live_cell--;
                    if(live_cell < 2)
                        board[r][c] = -100;
                    else if(live_cell > 3)
                        board[r][c] = -100;
                }
            }
        }

        for(int r=0; r<board.size(); r++){
            for(int c=0; c<board[r].size(); c++){
                if(board[r][c] == -100)
                    board[r][c] = 0;
                else if(board[r][c] == 100)
                    board[r][c] = 1;
            }
        }
    }
};
//Time Complexity: O(row * col)
/*
Extra testcase:
[[1,0,0,1,0,0,0,0,1,1,0,1,0,1,0,1,0,0,0,0,1,1,0,1,0],[0,1,1,0,1,0,0,1,0,0,0,0,1,1,0,1,0,0,0,0,1,1,0,1,0],[1,0,0,1,0,0,1,0,1,0,0,0,0,0,1,1,0,1,0,0,1,1,0,1,1],[0,0,0,1,0,1,1,0,1,0,0,0,0,0,1,1,0,1,0,0,0,0,1,0,0],[1,0,0,1,0,0,0,0,1,1,0,1,0,1,0,1,0,0,0,0,1,1,0,1,0],[0,1,1,0,1,0,0,1,0,0,0,0,1,1,0,1,0,0,0,0,1,1,0,1,0],[1,0,0,1,0,0,1,0,1,0,0,0,0,0,1,1,0,1,0,0,1,1,0,1,1],[0,0,0,1,0,1,1,0,1,0,0,0,0,0,1,1,0,1,0,0,0,0,1,0,0],[0,1,0,1,0,0,0,0,0,1,1,0,1,0,1,0,1,0,1,0,0,0,1,1,1],[1,0,1,0,0,1,0,0,0,0,1,1,0,1,0,0,0,0,1,1,0,1,0,1,1],[1,0,1,0,1,1,0,1,0,1,0,0,0,1,0,1,0,0,0,0,1,1,0,1,0],[0,1,0,1,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,1,1,0,1,0],[1,0,0,1,0,0,1,0,1,0,0,0,0,0,1,1,0,1,0,0,1,1,0,1,1],[0,0,0,1,0,1,1,0,1,0,0,0,0,0,1,1,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,1,1,0,1,0,0,0,0,0,1,1,0,1,0,0,0,0,1,0,0],[1,0,0,1,0,0,0,0,1,1,0,1,0,1,0,1,0,0,0,0,1,1,0,1,0],[0,1,1,0,1,0,0,1,0,0,0,0,1,1,0,1,0,0,0,0,1,1,0,1,0],[1,0,0,1,0,0,1,0,1,0,0,0,0,0,1,1,0,1,0,0,1,1,0,1,1],[0,0,0,1,0,1,1,0,1,0,0,0,0,0,1,1,0,1,0,0,0,0,1,0,0],[0,1,0,1,0,0,0,0,0,1,1,0,1,0,1,0,1,0,1,0,0,0,1,1,1],[1,0,1,0,0,1,0,0,0,0,1,1,0,1,0,0,0,0,1,1,0,1,0,1,1],[1,0,1,0,1,1,0,1,0,1,0,0,0,1,0,1,0,0,0,0,1,1,0,1,0],[0,1,0,1,0,0,0,0,0,1,1,0,1,0,1,0,1,0,1,0,0,0,1,1,1],[0,1,0,0,1,0,1,0,0,0,0,0,1,1,0,1,0,0,1,0,1,0,0,0,1]]
*/
